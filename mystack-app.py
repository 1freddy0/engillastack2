from flask import Flask, render_template, request, jsonify, redirect, url_for, session
from flask_sqlalchemy import SQLAlchemy
from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView
from datetime import datetime
import json
import traceback
import requests
import logging

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///engilla.db'
app.config['SECRET_KEY'] = '5bc1d8151e5a996ab2df5a1cbbf8515834bb4ac33b3a2f81'
db = SQLAlchemy(app)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Paystack Configuration
PAYSTACK_SECRET_KEY = 'sk_test_2b0784b6cbceaff54f93a7eb80be5ea79b32b84d'

# Models
class UserLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    user_inputs = db.Column(db.Text)
    clicks = db.Column(db.Integer)

class Feedback(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    content = db.Column(db.Text)

class Payment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    transaction_id = db.Column(db.String(255), unique=True)
    amount = db.Column(db.Float)
    currency = db.Column(db.String(3))
    status = db.Column(db.String(20))

class UserVisit(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_ip = db.Column(db.String(50), unique=True)
    visit_count = db.Column(db.Integer, default=1)
    last_visit = db.Column(db.DateTime, default=datetime.utcnow)

# Admin views
class UserLogView(ModelView):
    column_list = ('timestamp', 'user_inputs', 'clicks')
    column_searchable_list = ['user_inputs']
    column_filters = ['timestamp']

class FeedbackView(ModelView):
    column_list = ('timestamp', 'content')
    column_searchable_list = ['content']
    column_filters = ['timestamp']

class PaymentView(ModelView):
    column_list = ('timestamp', 'transaction_id', 'amount', 'currency', 'status')
    column_searchable_list = ['transaction_id']
    column_filters = ['timestamp', 'status']

class UserVisitView(ModelView):
    column_list = ('user_ip', 'visit_count', 'last_visit')
    column_searchable_list = ['user_ip']
    column_filters = ['last_visit']

admin = Admin(app, name='Engilla Admin', template_mode='bootstrap3')
admin.add_view(UserLogView(UserLog, db.session))
admin.add_view(FeedbackView(Feedback, db.session))
admin.add_view(PaymentView(Payment, db.session))
admin.add_view(UserVisitView(UserVisit, db.session))

recommendations = {
    "dusty": {
        "recommendation": "API SM, SN OR API SN PLUS 5W-30, 0W-40, 15W-40",
        "response": "High viscosity oils, better protection against contaminants and engine wear. Viscosity grades offer a good balance between flow characteristics at low temperature and protection at high temperature essential for dusty conditions."
    },
    "heavy_traffic": {
        "recommendation": "API SM, SN 5W-30, 10W-30, 0W-40 10W-40 15W-40, (SYNTHETIC: OPTIONAL),(OIL BRAND: OPTIONAL)",
        "response": "High viscosity index enhancer and detergent additives. These oils offer better engine protection, Temperature stability, engine cleanness, corrosion prevention and engine better seal conditioning."
    },
    "cold": {
        "recommendation": "API SM, SN 0W-40, 5W-40, (0W-50 EXTREME COLD)",
        "response": "Suitable for both cold starts and high temperature operation, good flow in cold weather while maintaining stability at high temperature. SYNTHETIC: OPTIONAL | OIL BRAND: OPTIONAL"
    },
    "heavy_load": {
        "recommendation": "API SM, API SN 10W-40, 15W-40, 20W-50, SAE 40, High viscosity oils",
        "response": "(Trucks and Buses and Towing vehicle) good cold start capabilities formulated with additives to withstand additional stress and heat generated by heavy loads and extended driving period."
    },
    "long_trips": {
        "recommendation": "API SM/API SN 5W-30, 10W-40, 15w 40. High viscosity oils.",
        "response": "Driving for extended period offers good flow characteristics at low temperature while providing adequate viscosity at higher temperature to maintain proper lubrication for better protection against heat and engine wear during extended periods of driving. SYNTHETIC OIL: OPTIONAL | OIL BRAND: OPTIONAL"
    },
    "short_trips": {
        "recommendation": "API SM, API SN 5W-30, 5W-40, 10W-30",
        "response": "Frequent short trips can lead to increased moisture build up in the oil. Lower viscosity oil with good detergent properties is required to combat sludge formation and ensure proper lubrication during cold start and short operating cycles. 5w-30 oil is perfect, flows well at lower temperatures providing adequate protection during short trips, frequent starts and stops."
    },
    "smokey": {
        "recommendation": "API SM, API SN 10W-30, 10W-40, 20W-50, SAE 40",
        "response": "high viscosity oils to reduce oil consumption and smoke, compensate for engine wear, and maintain proper lubrication. Good flow characteristics at low temperature, provides adequate protection under normal driving conditions. Engine diagnosis may be your best option."
    }
}

@app.route('/')
def welcome():
    return render_template('welcome.html')

@app.route('/index')
def index():
    return render_template('index.html')

@app.route('/verify-payment', methods=['GET'])
def verify_payment():
    reference = request.args.get('reference')
    logger.info(f"Verifying payment for reference: {reference}")
    
    # Verify the transaction with Paystack
    url = f"https://api.paystack.co/transaction/verify/{reference}"
    headers = {
        'Authorization': f'Bearer {PAYSTACK_SECRET_KEY}'
    }
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        if data['status'] and data['data']['status'] == 'success':
            # Payment successful, save to database and session
            payment = Payment(
                transaction_id=reference,
                amount=data['data']['amount'] / 100,  # Convert from kobo to Naira
                currency=data['data']['currency'],
                status='success'
            )
            db.session.add(payment)
            db.session.commit()
            session['payment_status'] = 'success'
            session['transaction_id'] = reference
            logger.info(f"Payment verified and saved: {reference}")
            return jsonify({"status": "success", "message": "Payment verified successfully"})
    
    logger.error(f"Payment verification failed: {reference}")
    return jsonify({"status": "error", "message": "Payment verification failed"}), 400

@app.route('/recommend', methods=['POST'])
def recommend_oil():
    data = request.json
    user_ip = request.remote_addr
    logger.info(f"Recommendation requested for IP: {user_ip}")

    # Check if user is a first-time visitor
    user_visit = UserVisit.query.filter_by(user_ip=user_ip).first()
    is_first_visit = user_visit is None

    if is_first_visit:
        logger.info(f"First-time visitor: {user_ip}")
        # Create new user visit record
        new_visit = UserVisit(user_ip=user_ip)
        db.session.add(new_visit)
        db.session.commit()
    else:
        logger.info(f"Returning visitor: {user_ip}")
        # Update existing user visit record
        user_visit.visit_count += 1
        user_visit.last_visit = datetime.utcnow()
        db.session.commit()

        # Check payment status from session for non-first-time users
        if session.get('payment_status') != 'success':
            logger.warning(f"Payment required for user: {user_ip}")
            return jsonify({"error": "Payment required", "message": "Please make a payment to receive a recommendation"}), 400

    conditions = data.get('conditions', [])
    
    # Log user inputs
    user_log = UserLog(
        user_inputs=json.dumps(data),
        clicks=len(conditions)
    )
    db.session.add(user_log)
    db.session.commit()

    if not conditions:
        logger.info(f"No specific conditions selected for user: {user_ip}")
        return jsonify({
            "recommendation": "Go with Manufacturer's specification",
            "response": "No specific conditions selected. Please refer to your vehicle's manual for the recommended oil type."
        })

    if len(conditions) >= 2:
        if set(conditions) == {"dusty", "heavy_traffic", "cold", "high_mileage"}:
            logger.info(f"Multiple conditions recommendation for user: {user_ip}")
            return jsonify({
                "recommendation": "API SM, SN 5w-30, 10w-30, 5w-40",
                "response": "High viscosity oils, better engine protection against contaminants and wares. Good flow characteristics at low and high operating temperature in dusty, heavy traffic and engine stress conditions. Detergent additives in 5w-30 makes it more suitable to keep engine clean, and protect it against sludge buildup."
            })
        elif set(conditions) == {"heavy_load", "long_trips", "short_trips", "smokey"}:
            logger.info(f"Multiple conditions recommendation for user: {user_ip}")
            return jsonify({
                "recommendation": "API SM, SN Thicker Engine oils: 10w-40, 15w-40. (Smokey: 20w 50, SAE 40)",
                "response": "These oils are suitable for regular long or short trips. Better engine protection, Temperature stability, engine cleanness, corrosion prevention, engine better seal conditioning in a very heavy load environment. Contain additives that form protective layer on engine surface."
            })
        else:
            logger.info(f"General multiple conditions recommendation for user: {user_ip}")
            return jsonify({
                "recommendation": "API SM, SN 5W-30, 5W-40, 10W-40",
                "response": "High viscosity oils with good flow characteristics at low and high temperature, providing adequate protection under various operating conditions."
            })

    if len(conditions) == 1:
        condition = conditions[0]
        if condition in recommendations:
            logger.info(f"Single condition recommendation for user: {user_ip}, condition: {condition}")
            return jsonify(recommendations[condition])

    logger.info(f"Default recommendation for user: {user_ip}")
    return jsonify({
        "recommendation": "API SM, SN 5W-30, 5W-40, 10W-40",
        "response": "High viscosity oils with good flow characteristics at low and high temperature, providing adequate protection under various operating conditions."
    })

@app.route('/feedback', methods=['POST'])
def feedback():
    data = request.json
    feedback_content = data.get('feedback', '')
    
    if feedback_content:
        feedback_entry = Feedback(content=feedback_content)
        db.session.add(feedback_entry)
        db.session.commit()
        logger.info(f"Feedback submitted: {feedback_content[:50]}...")
        return jsonify({"status": "success", "message": "Feedback submitted successfully"})
    else:
        logger.warning("Empty feedback submission attempt")
        return jsonify({"status": "error", "message": "Feedback content cannot be empty"}), 400

@app.route('/check-first-visit')
def check_first_visit():
    user_ip = request.remote_addr
    user_visit = UserVisit.query.filter_by(user_ip=user_ip).first()
    is_first_visit = user_visit is None
    logger.info(f"First visit check for IP {user_ip}: {'Yes' if is_first_visit else 'No'}")
    return jsonify({"is_first_visit": is_first_visit})

@app.errorhandler(500)
def internal_server_error(error):
    logger.error(f"Internal Server Error: {str(error)}\n{traceback.format_exc()}")
    return jsonify(error=str(error), stacktrace=traceback.format_exc()), 500

# Database initialization
with app.app_context():
    db.create_all()
    logger.info("Database tables created")

if __name__ == '__main__':
    app.run(debug=True)